variables:
    sourceDirectoryPatch: '\fitness\server\'
    solutionFile: 'fitness/server/Sitecore.HabitatHome.Fitness.TDS.sln'
    packageNamePrefix: HabitatFitness
trigger:
  branches:
    include:
    - master
    - hack-master
    - release/*

stages:

  - stage: Build_WDPs
    jobs:
    - job: Build_WDPs
      pool:
        name: DEVDEMO1US1
        demands:
        - msbuild
        - azureps
      steps:
      - task: 4tecture.BuildVersioning.BuildVersioning.BuildVersioning@0
        displayName: 'Set Version Number'
        inputs:
          versionSource: variable
          customNumberVariable: sitecore.version
          paramOverwriteFourthDigitWithBuildCounter: true
          buildNumberAction: replace
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet 4.4.1'
        inputs:
          versionSpec: 4.4.1
          checkLatest: true

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: $(solutionFile)
          feedsToUse: config
          nugetConfigPath:  '$(nuget.config)'

      - task: MSBuild@1
        displayName: '$(packageNamePrefix) - CM'
        inputs:
          solution: $(solutionFile)
          configuration: 'Package-CM'
          msbuildArguments: '/m /p:WebDeployPackageName=$(packageNamePrefix)-CM-$(BuildVersion.Version) /p:PackageName=$(packageNamePrefix)-CM-$(BuildVersion.Version) /p:SitecoreAssemblyPath=C:\assets\SitecoreLib'

      - task: MSBuild@1
        displayName: '$(packageNamePrefix) - CD'
        inputs:
          solution: $(solutionFile)
          configuration: 'Package-CD'
          msbuildArguments: '/m /p:WebDeployPackageName=$(packageNamePrefix)-CD-$(BuildVersion.Version) /p:PackageName=$(packageNamePrefix)-CD-$(BuildVersion.Version)'

      - task: CopyFiles@2
        displayName: 'Copy CM Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)$(sourceDirectoryPatch)\src\Build\Build.Website\tds\bin\'
          Contents: |
            **/$(packageNamePrefix)-CM*.update
            **/$(packageNamePrefix)-CM*.sccpl
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - task: CopyFiles@2
        displayName: 'Copy CD Files to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)$(sourceDirectoryPatch)\src\Build\Build.Website\tds\bin\'
          Contents: |
            **/$(packageNamePrefix)-CD*.files.update
            **/$(packageNamePrefix)-CD*.sccpl
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          flattenFolders: true

      - task: PowerShell@2
        displayName: "Convert CM .update packge to scwdp"
        inputs:
          targetType: 'inline'
          script: |
            $sat = "c:\assets\sat\tools\Sitecore.Cloud.Cmdlets.dll"
            Import-Module $sat -Force
            $updatePackageSource = (Get-ChildItem $(Build.ArtifactStagingDirectory) -Filter  $(packageNamePrefix)-CM*.update -Recurse).FullName
            ConvertTo-SCModuleWebDeployPackage -Path "$updatePackageSource"  -Destination $(Build.ArtifactStagingDirectory)\temp -Verbose -Force

      - task: PowerShell@2
        displayName: "Convert CD .update (files) package to scwdp"
        inputs:
          targetType: 'inline'
          script: |
            $sat = "c:\assets\sat\tools\Sitecore.Cloud.Cmdlets.dll"
            Import-Module $sat -Force

            $updatePackageSource = (Get-ChildItem $(Build.ArtifactStagingDirectory) -Filter  $(packageNamePrefix)-CD*.files.update -Recurse).FullName
            ConvertTo-SCModuleWebDeployPackage -Path "$updatePackageSource"  -Destination $(Build.ArtifactStagingDirectory)\temp -Verbose -Force

      - task: ExtractFiles@1
        displayName: 'Extract CM WDP'
        inputs:
          archiveFilePatterns: '$(Build.ArtifactStagingDirectory)\temp\$(packageNamePrefix)-CM*.scwdp.zip'
          destinationFolder: '$(Build.ArtifactStagingDirectory)\CM-temp'
          cleanDestinationFolder: true

      - task: ExtractFiles@1
        displayName: 'Extract CD WDP'
        inputs:
          archiveFilePatterns: '$(Build.ArtifactStagingDirectory)\temp\$(packageNamePrefix)-CD*.scwdp.zip'
          destinationFolder: '$(Build.ArtifactStagingDirectory)\CD-temp'
          cleanDestinationFolder: true

      - task: CopyFiles@2
        displayName: 'Copy Transforms to CM'
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '$(packageNamePrefix)-CM*.sccpl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)\CM-temp\Content\Website\App_Data\Transforms'
          flattenFolders: true

      - task: CopyFiles@2
        displayName: 'Copy Transforms to CD'
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '$(packageNamePrefix)-CD*.sccpl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)\CD-temp\Content\Website\App_Data\Transforms'
          flattenFolders: true

      - task: ArchiveFiles@2
        displayName: 'Create scwdp for CM'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\CM-temp'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(packageNamePrefix)-CM-$(BuildVersion.Version).scwdp.zip'
          replaceExistingArchive: true

      - task: ArchiveFiles@2
        displayName: 'Create scwdp for CD'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\CD-temp'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(packageNamePrefix)-CD-$(BuildVersion.Version).scwdp.zip'
          replaceExistingArchive: true

      - task: ArchiveFiles@2
        displayName: 'Create xConnect asset Archive'
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)$(sourceDirectoryPatch)\temp'
          #  Files required in this area are packaged / moved to the \temp folder in the Project.AppItems Post-Build events
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(packageNamePrefix)-xConnect-$(BuildVersion.Version).zip'
          replaceExistingArchive: true

      - task: DeleteFiles@1
        displayName: 'Delete all temporary folders'
        inputs:
          SourceFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '*temp*'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifacts'
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'WDPs'
          publishLocation: 'Container'
          parallel: false
  - stage: Start_Windows_VM
    dependsOn: []
    jobs:
    - job: Start_Windows_VM
      pool:
        name: DEVDEMO1US1
      steps:
        - task: vfabing.AzureVirtualMachineManagerTask.custom-build-release-task.AzureVirtualMachineManagerTask@1
          displayName: "Start Docker Build VM"
          inputs:
            Action: "Start VM"
            azureSubscription: "AzureSubscription"
            ResourceGroupName: $(docker.build.vm.resourceGroupName)
            VmName: $(docker.build.vm.name)
  - stage: Start_Linux_VM
    dependsOn: []
    jobs:
    - job: Start_Linux_VM
      pool:
        name: DEVDEMO1US1
      steps:
        - task: vfabing.AzureVirtualMachineManagerTask.custom-build-release-task.AzureVirtualMachineManagerTask@1
          displayName: "Start Docker Build VM"
          inputs:
            Action: "Start VM"
            azureSubscription: "AzureSubscription"
            ResourceGroupName: '$(docker.build.vm.resourceGroupName)'
            VmName: 'docker-ubuntu16'
  - stage: Build_Windows_Images
    dependsOn: 
    - Start_Windows_VM
    - Build_WDPs
    jobs:
        - job: Build_Windows_Images
          pool:
            name: Docker
            demands:
              - Agent.OS -equals Windows_NT
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              allowPartiallySucceededBuilds: false
              artifactName: 'WDPs'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: Docker@2
            displayName: 'Docker Login'
            inputs:
              containerRegistry: 'docker-registry'
              command: 'login'
              addPipelineData: false
          - powershell: |
              .\build.ps1 -BuildContext "windows" -Registry "$(registry)" -Build $(Build.BuildNumber) -CmWdpPath (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-CM-*.scwdp.zip" -Recurse).FullName -CdWdpPath (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-CD-*.scwdp.zip" -Recurse).FullName -XConnectWdpPath  (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-xConnect-*.zip" -Recurse).FullName
            workingDirectory: "./fitness/docker/"
            errorActionPreference: silentlyContinue
            continueOnError: "true"
            timeoutInMinutes: 720
  - stage: Build_Linux_Images
    dependsOn: 
    - Start_Linux_VM
    - Build_WDPs
    jobs:
        - job: Build_Linux_Images
          pool:
            name: 'Docker'
            demands:
            - Agent.OS -equals Linux
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              allowPartiallySucceededBuilds: false
              artifactName: 'WDPs'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: Docker@2
            displayName: 'Docker Login'
            inputs:
              containerRegistry: 'docker-registry'
              command: 'login'
              addPipelineData: false
          - powershell: |
              .\build.ps1 -BuildContext "linux" -Registry "$(registry)" -Build $(Build.BuildNumber) -CmWdpPath (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-CM-*.scwdp.zip" -Recurse).FullName -CdWdpPath (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-CD-*.scwdp.zip" -Recurse).FullName -XConnectWdpPath  (Get-ChildItem -Path $(System.ArtifactsDirectory) -Filter "*-xConnect-*.zip" -Recurse).FullName
            workingDirectory: "./fitness/docker/"
            errorActionPreference: silentlyContinue
            continueOnError: "true"
            timeoutInMinutes: 720
